<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">


	<!-- 开启包扫描 当前包及其子包 -->
	<context:component-scan base-package="com.jt" />
	<!-- 引入外部的配置文件 -->
	<!-- <context:property-placeholder location="classpath:/properties/jdbc.properties" /> -->
	<!-- 扩展引入外部配置文件的另一种方式 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:/properties/jdbc.properties</value>
				<value>classpath:/properties/redis.properties</value>
			</list>
		</property>
	</bean> 

	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	<!--AOP技术实现事务控制管理 在
	               原有方式的基础上，对方法进行扩展 
	               通知：前置通知 后置通知 异常通知 最终通知
	               作用：记录程序执行的过程 
		      最为重要的通知类型：环绕通知 作用：可以改变程序的环绕状态 
		      通知的用途： 对业务逻辑进行扩展 
		      切入点： 只有满足切入点表达式的方法才可以执行通知 -->
	<!-- 开启事务注解 -->
	<!-- <tx:annotation-driven/> -->
	<!-- 配置声明式的事务处理 -->

	<!-- 1.配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 2.配置事务的通知 定义事务的策略 
	      propagation="REQUIRED"事务的传播属性 
	                                         表示当前的操作必须添加事务
	      propagation="REQUIRED_NEW" 每次方法执行都会新建一个事务
	      propagation="SUPPORTS" 表示事务支持的，一切听别人的
	                                                               比如：先做新增后做查询，新增是有事务的，此时查询也是有事务的
	      propagation="NEVER"    表示从来不用事务，不能关联操作
	      
	      2.1 spring中默认的事务策略（spring在什么情况下回滚事务，什么情况是不回滚事务）
	                     规则:
	                             如果spring遇到运行时异常则默认回滚事务
	                             如果spring遇到检查时异常（编译异常 ）Sql异常、IO异常、自定义异常 throw 事务默认不回滚
	         rollback-for="异常类型"       指定异常回滚事务
	         no-rollback-for="异常类型"    指定异常类型不回滚
	              总结：程序中需要处理异常，则需要考虑事务回滚的特性，一般讲检查异常转化为运行时异常
	          throw new RunTimeException(检查异常)
    -->
	<tx:advice id="txAdvice">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="*" propagation="SUPPORTS" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<!-- 3.配置事物的切面
	        3.1  within 表达式
	                    语法：within(包名.类名)
	         within(con.jt.manage.service.UserService)
	                   粗粒度的事务控制
	        3.2 execution
	                    语法:execution(返回值类型 包名.类名.方法名(参数列表))
	              ..任意参数
	                    例子 execution(* com.jt.manage.service.*.*(..))
	-->
	<aop:config>
	<!-- 配置通知 -->
	<aop:pointcut expression="execution(* com.jt.manage.service.*.*(..))" id="pc"/>
	<aop:advisor advice-ref="txAdvice" pointcut-ref="pc"/>
	</aop:config>
</beans>